# -*- coding: utf-8 -*-
#
# unitdata.py
#
# Copyright (C) 2013 Steve Canny scanny@cisco.com
#
# This module is part of python-opc and is released under the MIT License:
# http://www.opensource.org/licenses/mit-license.php

"""Test data builders for unit tests"""

from docx.oxml.base import nsdecls, oxml_fromstring


class BaseBuilder(object):
    """
    Provides common behavior for all data builders.
    """
    nsdecls = ' %s' % nsdecls('w')

    def __init__(self):
        """Establish instance variables with default values"""
        self._empty = False
        self._indent = 0
        self._nsdecls = ''

    @property
    def element(self):
        """Return element based on XML generated by builder"""
        return oxml_fromstring(self.xml)

    @property
    def is_empty(self):
        return True

    def with_indent(self, indent):
        """Add integer *indent* spaces at beginning of element XML"""
        self._indent = indent
        return self

    def with_nsdecls(self):
        self._nsdecls = self.nsdecls
        return self


class CT_BodyBuilder(BaseBuilder):
    """
    Test data builder for CT_Body (<w:body>) XML element that appears in
    document.xml files.
    """
    def __init__(self):
        """Establish instance variables with default values"""
        super(CT_BodyBuilder, self).__init__()
        self._p = None
        self._sectPr = None

    @property
    def is_empty(self):
        return self._p is None and self._sectPr is None

    def with_p(self):
        """Add an empty paragraph element"""
        self._p = a_p()
        return self

    def with_sectPr(self):
        """Add an empty section properties element"""
        self._sectPr = a_sectPr()
        return self

    @property
    def xml(self):
        """Return element XML based on attribute settings"""
        indent = ' ' * self._indent
        if self.is_empty:
            xml = '%s<w:body %s/>\n' % (indent, nsdecls('w'))
        else:
            xml = '%s<w:body %s>\n' % (indent, nsdecls('w'))
            if self._p:
                xml += self._p.with_indent(self._indent+2).xml
            if self._sectPr:
                xml += self._sectPr.with_indent(self._indent+2).xml
            xml += '%s</w:body>\n' % indent
        return xml


class CT_PBuilder(BaseBuilder):
    """
    Test data builder for a CT_P (<w:p>) XML element that appears within the
    body element of a document.xml file.
    """
    def __init__(self):
        """Establish instance variables with default values"""
        super(CT_PBuilder, self).__init__()
        self._r = []

    @property
    def is_empty(self):
        return len(self._r) == 0

    def with_r(self, count=1):
        """Add *count* empty run elements"""
        for i in range(count):
            self._r.append(an_r())
        return self

    @property
    def xml(self):
        """Return element XML based on attribute settings"""
        indent = ' ' * self._indent
        if self.is_empty:
            xml = '%s<w:p%s/>\n' % (indent, self._nsdecls)
        else:
            xml = '%s<w:p%s>\n' % (indent, self._nsdecls)
            for r in self._r:
                xml += r.with_indent(self._indent+2).xml
            xml += '%s</w:p>\n' % indent
        return xml


class CT_RBuilder(BaseBuilder):
    """
    Test data builder for a CT_R (<w:r>) XML element that appears within the
    body element of a document.xml file.
    """
    def __init__(self):
        """Establish instance variables with default values"""
        super(CT_RBuilder, self).__init__()
        self._t = []

    @property
    def is_empty(self):
        return len(self._t) == 0

    def with_t(self, text):
        """Add an text element containing *text*"""
        self._t.append(a_t(text))
        return self

    @property
    def xml(self):
        """Return element XML based on attribute settings"""
        indent = ' ' * self._indent
        if self.is_empty:
            xml = '%s<w:r%s/>\n' % (indent, self._nsdecls)
        else:
            xml = '%s<w:r%s>\n' % (indent, self._nsdecls)
            for t_builder in self._t:
                xml += t_builder.with_indent(self._indent+2).xml
            xml += '%s</w:r>\n' % indent
        return xml


class CT_TextBuilder(BaseBuilder):
    """
    Test data builder for a CT_Text (<w:t>) XML element that appears within a
    run element.
    """
    def __init__(self, text):
        """Establish instance variables with default values"""
        super(CT_TextBuilder, self).__init__()
        self._text = text

    @property
    def xml(self):
        """Return element XML based on attribute settings"""
        indent = ' ' * self._indent
        return '%s<w:t%s>%s</w:t>\n' % (indent, self._nsdecls, self._text)


class CT_SectPrBuilder(BaseBuilder):
    """
    Test data builder for a CT_SectPr (<w:sectPr>) XML element that appears
    within the body element of a document.xml file.
    """
    def __init__(self):
        """Establish instance variables with default values"""
        super(CT_SectPrBuilder, self).__init__()

    @property
    def xml(self):
        """Return element XML based on attribute settings"""
        tmpl = '%s<w:sectPr/>\n'
        indent = ' ' * self._indent
        return tmpl % (indent)


def a_body():
    """Return a CT_BodyBuilder instance"""
    return CT_BodyBuilder()


def a_p():
    """Return a CT_PBuilder instance"""
    return CT_PBuilder()


def a_t(text):
    """Return a CT_TextBuilder instance"""
    return CT_TextBuilder(text)


def a_sectPr():
    """Return a CT_SectPr instance"""
    return CT_SectPrBuilder()


def an_r():
    """Return a CT_RBuilder instance"""
    return CT_RBuilder()
